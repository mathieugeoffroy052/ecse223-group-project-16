namespace CarShop.model;

/*
Constraints

1. One of each technician type
2. User account can only be logged in if the user is signed up
3. Garage opening hours must be within the weekly business hours
4. Garage business hours must not conflict with garage holidays or breaks
5. You can't have two appointments with the same technician at the same time
6. A service combo cannot have two of the same services
7. Every service should see its duration rounded up to the nearest 30 minute interval

*/




class CarShop{
	Date date;
	String generalInfo;
	String address;
	String emailAddress;
	String phoneNUmber;	
	
	//Associations
1--1 Owner;	
1 shop --* WeeklySchedule weeklySchedule;
}

class Owner{
	isA UserAccount;

}

class WeeklySchedule{
	Date[] holidaySchedule;
}

class TechnicianAccount{
	isA UserAccount;
	JobType technicianType;
	
	enum JobType{
	Tires,
	Engine,
	Transmission,
	Electronics,
	Fluids}

		
}

class User{
	String name;
	Boolean isSignedUp;
}

//need to be abstract
class UserAccount{
//make username unique
	String username;
	String password;
	Boolean isLoggedIn;
}

class CustomerAccount{
	isA UserAccount;
}

class Garage{
1--* Schedule activeDays;
1 garage--1 AppointmentCalendar appointmentSchedule;
}

class Schedule{
	Boolean isHoliday;
	Boolean isBreakDay;
	Date startTime;
	Date endTime;
7 days -- 1 WeeklySchedule week;
}

 class AppointmentCalendar {
1 calendar -<@> 1 CustomerAccount customer;
1 calendar <@>- * Appointment appointments; 
}

class Appointment {
    Integer daysBeforeAppointment;
    Date startTime;
    Date endTime;
    ServiceList service;
	1<@>-* ServiceList;
	1 customer--* CustomerAccount appt;
	0..1 prevAcct -- 0..1 Appointment nextAppt;
}

class Service{

enum WorkType{
	Tires,
	Engine,
	Transmission,
	Electronics,
	Fluids}
	
	unique String name;
	WorkType generalService;
	before constructor, setName{
		if (aName == null || aName.length() == 0) {
			throw new RuntimeException("Please enter a valid name");
			}
	}
	Double durationInHours;
	0..1 prerequesite -- 0..1 Service successor;
	0..* -- 1 Garage workingGarage;
	0..* -- 1 CarShop;
}
	
	
class ServiceList{
	Service serviceName;
	enum ComboType {Required, Optional}
	ComboType comboType;
	Boolean isServiceCombo;
	0..1 <@>- 0..1 Service firstTerm; 
	0..1 -> 1 Service mainService;
	0..* -- 1 Owner;
	//servicelist to appointment
}



