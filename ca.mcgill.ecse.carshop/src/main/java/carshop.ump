namespace ca.mcgill.ecse.carshop.model;

use CarShopStates.ump;
use CarShopPersistence.ump;
use CarShopTransferObjects.ump;

class CarShop  {
  1 <@>- 0..1 Business business;
  1 <@>- 0..1 Owner owner;
  1 <@>- * Customer customers;
  1 <@>- 0..5 Technician technicians;
  1 <@>- 0..5 Garage garages;
  1 <@>- * BusinessHour hours;
  1 <@>- * Appointment appointments;
  1 <@>- * TimeSlot timeSlots;
  1 <@>- * BookableService bookableServices;
  
  	public int getTechnicianWithString(String str) {
		int iend = str.indexOf("-");
		String subString = null;
		if (iend != -1) 
		{
		    subString = str.substring(0, iend); //this will give abc
		}
		subString = subString.toLowerCase();
		for(int i = 0; i < this.numberOfTechnicians(); i++) {
			String userName = this.getTechnician(i).getUsername();
			userName = userName.toLowerCase();
			if(userName.contains(subString)) return i;
		}
		return -1;
	}

}

class User {
  abstract;
  unique username;
  password;
  
  public static Map<String, User> getUsersByUsername() {
	return usersByUsername;
  }

  public static void setUsersByUsername(Map<String, User> usersByUsername) {
	User.usersByUsername = usersByUsername;
  }
  
}

class Owner {
  isA User;
}

class Customer {
  isA User;
}

class Technician {
  enum TechnicianType {
    Tire, Engine, Transmission, Electronics, Fluids
  }
  1 -- 0..1 Garage garage;
  TechnicianType type;
  
  isA User;
  
    public TechnicianType getTechnicianType(String string) {
	  string = string.toLowerCase();
	  int toCheck = carShop.getTechnicianWithString(string);
	  if(toCheck == -1) return null;
	  return carShop.getTechnician(toCheck).getType();
    }
  

  
}

class Business {
  name;
  address;
  phoneNumber;
  email;
    // since there is only one business in this system, the first
  // 0..1 should be a 1. since this is a directed association, the
  // first multiplicity is not taken into account. hence, it is 
  // changed to 0..1 to avoid Umple issuing warning W036
  // Unmanaged Multiplicity
  0..1 -> * BusinessHour businessHours;
  0..1 -> * TimeSlot holidays;
  0..1 -> * TimeSlot vacations;
  // association to Owner is not modeled because there is
  // only one owner and only one business in the system
}

class BusinessHour {
  enum DayOfWeek { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }
  DayOfWeek dayOfWeek;
  Time startTime;
  Time endTime;
}

class TimeSlot {
  Date startDate;
  Time startTime;
  Date endDate;
  Time endTime;
}

class Garage {
  0..1 -> * BusinessHour businessHours;
  1 -- * Service services;
}

class BookableService {
  abstract;
  unique name;
  
    public ComboItem getMainService()
  {
    return null;
  }
  
    public int getDuration() {
	  if(this instanceof Service) {
		  return this.getDuration();
	  }
	  else return 0;
  }
}

class Service {
  isA BookableService;
  int duration;
}

class ServiceCombo {
  isA BookableService;
  * -> 0..1 ComboItem mainService;
  // the services should be {ordered}; however, since Umple translates every * association
  // or composition into a list, it is possible to order items in that list given Umple's API
  1 <@>- 2..* ComboItem services;
}

class ComboItem {
  boolean mandatory;
  * -> 1 Service service;
  public String isMandatory() {
  if(this.mandatory == true) return "mandatory";
  else return "";
  }
}


class Appointment {
  * -- 1 Customer customer;
  * -- 1 BookableService bookableService;
  1 <@>- * ServiceBooking serviceBookings;
}

class ServiceBooking {
  * -- 1 Service service;
  0..1 -> 1 TimeSlot timeSlot;
}