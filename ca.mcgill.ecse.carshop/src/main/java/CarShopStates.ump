class Appointment {
  depend java.sql.Date;
  depend java.sql.Time;
  depend java.time.LocalDate;
  depend java.time.LocalTime;
  depend ca.mcgill.ecse.carshop.application.CarShopApplication;
  AppointmentStatus{
    
    Booked {
      
      changeAppointmentService(Service newService)[!startingSoon()] /{changeService(newService);}
      -> Booked;
      changeAppointmentService(Service newService)[startingSoon()]/{
        changeServiceUnsuccessful(newService);
      }
      -> Booked;
      
      changeStartDateAndTime(Date newStartDate, List<Time> newStartTimes)[startingSoon()]/{
        changeDateAndTimeUnsuccessful(newStartDate, newStartTimes);
      }
      -> Booked;
      changeStartDateAndTime(Date newStartDate, List<Time> newStartTimes)[!startingSoon()]/{
        changeDateAndTime(newStartDate, newStartTimes);
      }
      -> Booked;
      
      addOptServiceToCombo(Service service, Time startTime)[!startingSoon()]/ {
        addOptService(service, startTime);
      }
      -> Booked;
      addOptServiceToCombo(Service service, Time startTime)[startingSoon()]/ {
        addOptServiceUnsuccessful(service, startTime);
      }
      -> Booked;
      
      
      cancelBooking[!startingSoon()]
      -> Final;
      cancelBooking[startingSoon()]/ {cancelAppointmentUnsuccessful();}
      -> Booked;
      
      
      startAppointment[!isEarly()] -> InProgress;
      
      startAppointment[isEarly()]/ {startingAppointmentUnsuccessful();}
      -> Booked;
      
      
      noShow[hasEnded()]/{updateNoShow();}
      -> Final;
      
      endAppointment/{endAppointmentUnsuccessful();}
      -> Booked;
    }
    
    InProgress {
      startAppointment/ {startAppointmentInProgress();}
      -> InProgress;
      
      changeAppointmentService(Service newService)/{changeServiceInProgress(newService);}
      -> InProgress;
      changeStartDateAndTime(Date newStartDate, List<Time> newStartTimes)/{
        changeDateAndTimeInProgress(newStartDate, newStartTimes);
      }
      -> InProgress;
      addOptServiceToCombo(Service service, Time startTime)/ {
        addOptService(service, startTime);
      }
      -> InProgress;
      cancelAppointment/ {cancelAppointmentInProgress();}
      -> InProgress;
      
      noShow/ {updateNoShowInProgress();}
      -> InProgress;
      
      endAppointment -> HasEnded;
    }
    
    HasEnded {
      -> Final;
    }
    
    
  }
  
  
  private static Time findEndTime(BookableService service, Time startTime) {
		int duration = service.getDuration();
		int minutes = duration % 60;
		int hours = duration / 60;
		
		LocalTime localtime = startTime.toLocalTime();
		localtime = localtime.plusMinutes(minutes);
		localtime = localtime.plusHours(hours);
		Time endTime = Time.valueOf(localtime);
		return endTime;
	}

	
	private void changeService(Service serviceName) {
		if (this.getBookableService() instanceof Service) {
			this.setBookableService(serviceName);
			this.getServiceBooking(0).setService(serviceName);
			Time endTime = findEndTime(serviceName, this.getServiceBooking(0).getTimeSlot().getStartTime());
			this.getServiceBooking(0).getTimeSlot().setEndTime(endTime);
		} else {
			this.setBookableService(serviceName);
			this.getServiceBooking(0).setService(serviceName);
			Time endTime = findEndTime(serviceName, this.getServiceBooking(0).getTimeSlot().getStartTime());
			this.getServiceBooking(0).getTimeSlot().setEndTime(endTime);
		}
	}

	private void changeDateAndTime(Date date, List<Time> times) {
		if (this.getBookableService() instanceof Service) {
			Time endTime = findEndTime(this.getBookableService(), times.get(0));
			
			this.getServiceBooking(0).getTimeSlot().setStartDate(date);
			this.getServiceBooking(0).getTimeSlot().setEndDate(date);
			this.getServiceBooking(0).getTimeSlot().setStartTime(times.get(0));
			this.getServiceBooking(0).getTimeSlot().setEndTime(endTime);
		} else {
			for(int i = 0; i < times.size(); i++) {
				ServiceBooking sb = this.getServiceBooking(i);
				TimeSlot timeSlot = sb.getTimeSlot();
				
				Time endTime = findEndTime(sb.getService(), times.get(i));
				
				timeSlot.setStartDate(date);
				timeSlot.setEndDate(date);
				timeSlot.setStartTime(times.get(i));
				timeSlot.setEndTime(endTime);
			}
		}
	}

	private void addOptService(Service service, Time startTime) {
		if (this.bookableService instanceof ServiceCombo) {
			Date date = this.getServiceBooking(0).getTimeSlot().getStartDate();
			Time endTime = findEndTime(service, startTime);
			
			TimeSlot newTimeSlot = new TimeSlot(date, startTime, date, endTime, carShop);
			
			new ServiceBooking(service, newTimeSlot, this);
		}
	}
	
	private void startingAppointmentUnsuccessful() {
		throw new RuntimeException("Cannot start appointment early");
	}
	
	private void changeServiceUnsuccessful(Service service) {
		throw new RuntimeException("Cannot change the service now, appointment starting within 24 hours");
	}
	
	private void changeDateAndTimeUnsuccessful(Date date, List<Time> newStartTimes) {
		throw new RuntimeException("Cannot change the start time now, appointment starting within 24 hours");
	}
	
	private void cancelAppointmentUnsuccessful() {
		throw new RuntimeException("Cannot cancel appointment now, appointment starting within 24 hours");
	}
	
	private void addOptServiceUnsuccessful(Service service, Time startTime) {
		throw new RuntimeException("Cannot add optional now, appointment starting within 24 hours");
	}
	
	private void updateNoShow() {
		this.getCustomer().updateNoShow();
	}
	
	private void endAppointmentUnsuccessful() {
		throw new RuntimeException("Cannot end appointment before it starts");
	}
	
	private void startAppointmentInProgress() {
		throw new RuntimeException("Appointment is already in progress");
	}
	
	private void changeServiceInProgress(Service service) {
		throw new RuntimeException("Cannot change the service, appointment is in progress");
	}
	
	private void changeDateAndTimeInProgress(Date date, List<Time> times) {
		throw new RuntimeException("Cannot change start time now, appointment is in progress");
	}
	
	private void cancelAppointmentInProgress() {
		throw new RuntimeException("Cannot cancel, appointment is in progress");
	}
	
	private void updateNoShowInProgress() {
		throw new RuntimeException("Cannot update no show, appointment is in progress");
	}
	
	
	
	private boolean startingSoon() {
		Date systemDate = CarShopApplication.getSystemDate();
		Time systemTime = CarShopApplication.getSystemTime();
		
		Date startDate = this.getServiceBooking(0).getTimeSlot().getStartDate();
		Time startTime = this.getServiceBooking(0).getTimeSlot().getStartTime();
		
		if(startDate.equals(systemDate)) {
			return true;
		}
		
		LocalDate localDate = startDate.toLocalDate();
		localDate = localDate.minusDays(1);
		
		
		if(Date.valueOf(localDate).equals(systemDate) && startTime.before(systemTime)) {
			return true;
		}
		
		return false;
	}
	
	private boolean isEarly() {
		Date systemDate = CarShopApplication.getSystemDate();
		Time systemTime = CarShopApplication.getSystemTime();
		
		Date startDate = this.getServiceBooking(0).getTimeSlot().getStartDate();
		Time startTime = this.getServiceBooking(0).getTimeSlot().getStartTime();
		
		if(startDate.equals(systemDate) && !startTime.after(systemTime)) {
			return false;
		}
		return true;
	}
	
	private boolean hasEnded() {
		Date systemDate = CarShopApplication.getSystemDate();
		Time systemTime = CarShopApplication.getSystemTime();
		
		Date endDate = this.getServiceBooking(this.getServiceBookings().size() - 1).getTimeSlot().getEndDate();
		Time endTime = this.getServiceBooking(this.getServiceBookings().size() - 1).getTimeSlot().getEndTime();
		
		if(endDate.before(systemDate)) {
			return true;
		}
		if (endDate.equals(systemDate) && endTime.before(systemTime)) {
			return true;
		}
		return false;
	}
	
}

class Customer {
	int noShowCounter = 0;
	
	public void updateNoShow() {
	   noShowCounter++;
   }
}
